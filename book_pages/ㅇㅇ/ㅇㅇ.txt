print(c)
Out
-Tensor-MUSPY
[11.2.]
(3.4.]]
-NumPy - Tensor---
tensor([[1., 2.),
[3., 4.]])
In
3.2.4 범위를 지정하여 Tensor의 일부에 접근
다양한 방법으로 Tensor의 일부에 범위를 지정하여 접근할 수 있습
▼ 범위를 지정하여 Tensor 의 요소에 접근
a-torch. tensor([[1, 2, 3],
[4, 5, 6]])
print("--2개의 인덱스를 지정)
print(a[0, 1])
print(" 범위를 지정)
print(a[1:2, :2])
print("--- 리스트로 여러 개의 인덱스를 지정 ---")
print(a[:, [0,2]])
print("--3보다 큰 요소만을 지정)
print(a[a>3])
66 CHAPTER 3 PyTorch LOND
니다.
print(요소의 변경)
a[0,2] - 11
print(a)
print(요소의 일괄변경
a[1, 1]-22
print(a)
print("10보다 큰 요소만 변경
a[D>10]-33
print(a)
Out
-2개의 인덱스를 지정
tensor(2)
범위를 지정
tensor([[4,5]])
리스트로 여러 개의 인덱스를 지점-
tensor([[13],
[4,6]])
-3보다 큰 요소만을 지정
tensor([4, 5, 6])
요소의 변경-
tensor ([[1, 2, 11],
[4, 5, 6]])
요소의 일괄 변경
tensor ([[1, 22, 11],
[4, 22, 6]])
-10보다 큰 요소만 변경-
32 x 67
tessori 1, 33, 39),
[4, 33, 6]])
3.25 Tensor의 연산
Tensor끼리의 연산은 일정한 규칙에 따라 이뤄집니다. 형태가 다른
끼리라도 조건을 충족하면 연산할 수 있습니다.
Tensor의 연산
a torch. tensor([1, 2, 3])
b= torch. tensor ([4, 5, 6])
c torch. tensor ([[6, 5, 4],
[3, 2, 1]])
print("--- 벡터와 스칼라의 연산)
print(a+3)
print("--벡터끼리의 연산---")
print(a + b)
print("-- 행렬과 스칼라의 연산---")
print(c+2)
print("--- 행렬과 벡터의 연산(브로드캐스트) ---">
print(c+a)
68 CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
Tensor
print("행렬끼리의 연산
print(c+ c)
Out
벡터와 스킬라의 연산-
tensor([4, 5, 6])
・벡터끼리의 연산
tensor([5, 7, 91
-
행렬과 스칼라의 연산---
tensor ([[8, 7, 63,
[5, 4, 3]])
행렬과 벡터의 연산(브로드캐스트) -
tensor([[7, 7, 7],
[4, 4, 4]])
정렬끼리의 연산--
tensor ([[12, 18, 8],
[6, 4, 2]])
C와의 합에서는 브로드캐스트가 사용되고 있습니다. 브로드캐스트는 조건을
충족하면 형태가 다른 Tensor끼리도 연산이 가능한 기능인데, 이 경우의 각
행에의 대응하는 요소가 더해집니다.
3.2.6 Tensor 형태 변환하기
Tensor에는 그 형태를 변환하는 함수와 메서드가 몇 가지 있습니다. View()
메서드를 사용하면 Tensor 형태를 자유롭게 변경할 수 있습니다.
▼view()메서드로 Tensor 형태 변환하기
In
a = torch. tensor ([0, 1, 2, 3, 4, 5, 6, 7]) # 1차원 Tensor
32Tensor 69
Out
avie(24) (2.4)의 2차원 Tensor로 변환
print(b)
tensor([[0, 1, 2, 3),
[4, 5, 6, 7]])
여러 인수 중 하나를 1로 하면 그 차원의 요소 수는 자동으로 계산됩니
다음 예에서는 인수에 2와 4를 지정해야 하는 곳을 2와 -1을 지정하고
√view()메서드의 인수 중 1개를 1로 한다
In
c torch.tensor ([0, 1, 2, 3, 4, 5, 6, 7]) 1차원 Tensor
d = c.view(2-1) (2.4)의 2차원 Tensor로 변환
print(d)
Out
tensor([[e, 1, 2, 3],
[4, 5, 6, 7]])
또한, 인수를-1로만 하면 Tensor는 1차원으로 변환됩니다.
▼view() 메서드의 인수를 1로만 한다
In
e= torch. tensor([[[8, 1],
[2, 3]],
[[4, 5],
[6,7]]]]
3차원 Tensor
f=c.view(-1) 1차원 Tensor로 변환
print(f)
70 CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
니다.
2습니다.
Out
tensor ([0, 1, 2, 3, 4, 5, 6, 71)
또한, squeeze() 메서드를 사용하면 요소 수가 1인 차원이 삭제됩니다.
▼ squeeze) 메서드로 요소 수가 1인 차원을 삭제하기
In
print("-- 요소 수가 1인 차원이 포함되는 4차원 Tensor
g-torch.arange(0, 8).view(1, 2, 1, 4)
print(g)
print("--- 요소수가 1인 차원을 삭제
hg.squeeze()
print(h)
Out
-요소 수가 1인 차원이 포함되는 4차원 Tensor--
tensor ([[[[0, 1, 2, 3]],
[[4, 5, 6, 7]]]])
요소수가 1인 차원을 삭제-
-
tensor ([[0, 1, 2, 3],
[4, 5, 6, 7]])
반대로 unsqueeze() 메서드를 사용하면 요소 수가 1인 차원을 추가할 수 있
습니다.
In
unsqueeze() 메서드로 요소 수가 1인 차원을 추가한다
print("--- 2차원 Tensor--")
i torch.arange(0, 8).view(2, -1)
32 Tensor 71
23.4.33
Amy-Tensor-
3.24 범위를 지정하여 Tensor의 일부에 접근
다양한 방법으로 Tensor의 일부에 범위를 지정하여 접근할 수 있습니다.
범위를 지정하여 Tensor 의 요소에 접근
a-torch, tensor([[1, 2, 3],
[4, 5, 6]])
print("--2개의 인덱스를 지정)
print(a[0, 1])
print(범위를 지정)
print (a[1:2, :2])
print("-리스트로 여러 개의 인덱스를 지정 ---")
print(a[:, [0,2]])
print("보다폰 요소만을 지정)
print(a[a>3])
66 CHADIERS PyTorch로 구현하는 간단한 심층학습
print의 변경
[8, 2]-11
print(a)
print("요소의 일원 변경
[:, 11-22
print(a)
print("-10보다 큰 요소만 변경)
a[a>10] 33
print(a)
Out
-2개의 인덱스 지정
tensor(2)
범위를 지정-
tensor([[4, 5]])
-
-리스트로 여러 개의 인덱스를 지정
tensor([[1, 3],
[4,6]])
-3보다 큰 요소만을 지정
tensor([4, 5, 6])
-요소의 변경
-
tensor([[1, 2, 11],
-
[4, 5, 6]])
-요소의 일괄 변경-
tensor ([[ 1, 22, 11],
[4, 22, 6]])
-10보다 큰 요소만 변경-
3.2 Terisor
67
4 33, 33],
[4.33, 877
3.25 Tensors 21
Tenor의 연산은 일정한 규칙에 따라 이뤄집니다. 형태가 다른 Ter
리라도 조건을 충족하면 연산할 수 있습니다.
▼ Tensor 24
319
a-torch, tensor([1, 2, 3])
b- torch. tensor ([4, 5, 6])
+9807
c- torch. tensor([[6, 5, 4],
[3, 2, 1]])
print("-- 벡터와 스칼라의 연산--")
print(a+3)
print("---벡터끼리의 연산---")
print(a+b)
print("-- 행렬과 스칼라의 인산---")
print(c + 2)
print("-- 행렬과 벡터의 연산(브로드캐스트) ---")
print(c + a)
68
CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
print끼리의 연산)
print(c+ c)
Out
-벡터와 스칼라의 연산
tensor([4, 5, 6])
-벡터끼리의 연산
tensor([5, 7, 9])
성립과 스칼라의 연산
tensor([[B, 7, 6),
[5, 4, 33])
--형렬과 벡터의 연산(브로드캐스트)-
Lensor([[77, 71,
[4, 4, 4]])
--행렬끼리의 연산--
tensor ([[12, 18, B],
[6, 4, 2]])
C와 a의 합에서는 브로드캐스트가 사용되고 있습니다. 브로드캐스트는 조건을
충족하면 형태가 다른 Tensor끼리도 연산이 가능한 기능인데, 이 경우 C의 각
행에 그의 대응하는 요소가 더해집니다.
3.2.6 Tensor 형태 변환하기
Tensor에는 그 형태를 변환하는 함수와 메서드가 몇 가지 있습니다. View()
메서드를 사용하면 Tensor 형태를 자유롭게 변경할 수 있습니다.
▼ view) 메서드로 Tensor 형태 변환하기
In
a = torch. tensor ([0, 1, 2, 3, 4, 5, 6, 7]) 1차원 Tensor
3.2 Tensor
69
in
Br
rere. 1, 2, 3).
(4, 5, 6, 731)
여러 인수 중 하나로 하면 그 차원의 요소수는 자동으로 계산됩니다.
다음에서는 인수에 2와 4를 지정해야 하는 곳을 2와 1을 지정하고 있습
ew()메서드의 인수 중 1개를 -구로 한다.
ctarch tensor([0, 1, 2, 3, 4, 5, 6, 7]) 1차원 Tensor
doc.view(2-1)(2, 4)의 2차원 Tensor로 변환
print(d)
Out
tensor([[0, 1, 2, 3],
[4,5,6,7]])
또한, 인수를 1로만 하면 Tensor는 1차원으로 변환됩니다.
view) 메서드의 인수를-1로만 한다
e= torch.tensor ([[[e, 1],
[2, 3]],
[[4, 5],
[6,7]]]) #3차원 Tensor
f=c.view(-1)#1차원 Tensor로 변환
print(f)
70 CHAPTER 3 PyTorch로 구원하는 간단한 심층학습
니다.
Out
Lensor([0, 1, 2, 3, 4, 5, 6, 73)
또한, squeeze() 메서드를 사용하면 요소수가 1인 치원이 삭제됩니다.
In
SQLGK) 메서드로 요소 수가 1인 차원을 삭제하기
print("요소수가 1인 자원이 포함되는 4차원 Tensor
9 - torch.arange(0,8).vlen(1, 2, 1, 4)
print()
print("요소 수가 1인 차원을 삭제
hg-squeeze()
print(h)
Out
•요소 수가 1인 차원이 포함되는 4차원 Tensor
tensor ([[[[0, 1, 2, 3]],
[[4,5,6,7]]]
--- 요소수가 1인 차원을 삭제-
tensor ([[0, 1, 2, 3],
[4, 5, 6, 7]])
반대로 unsqueeze() 메서드를 사용하면 요소수가 1인 차원을 추가할 수 있
습니다.
In
unsqueeze() 메서드로 요소 수가 1인 차원을 추가한다
print("--- 2차원 Tensor ---")
i torch.arange(8, 8).view(2,-1)
32 Tensor 71
