다. 아무런 진전 없는 반복이 바로 업식, 까르마입니다. 습관
화된 거예요 실수를 통해 습관을 극복하는 것은 좋은데, 실
수 자체가 잘못됐다고 생각하면 안 됩니다. 열 걸음 가야 할
것을 한두 걸음 가놓고 못갔네 안 되겠네' 하며 좌절하는
것은 욕심입니다. 실수를 잘못으로 본 것입니다.
누군가를 좋아해서 고백했는데, 상대가 싫다고 하면 상처
를 받았다고 생각하지 마세요. 그 사람의 마음을 확인했다'
고 생각하세요. 오히려 잘 된 일입니다. 고백하지 않았다면
계속 짝사랑만 할 뻔했잖아요. 상대가 싫다고 하면, 내 마음
을 정리하면 됩니다.
내 마음이 포기가 안 될 때도 마찬가지예요. 상대에 대해
연구할 수 있기 때문이에요. 나에 대한 호감이 50이 아닌 0
에서 출발한다고 생각하고, 상대가 좋아할 일들을 연구하고
실행해 볼 수 있습니다. 그렇게 했는데도 상대가 싫다고 하
면 깨끗하게 단념하면 됩니다.
그런데 이런 실수가 왜 문제가 됩니까? 여러분은 한두 번
실수로도 쉽게 좌절하고 괴로워하는데, 그건 어릴 때부터 아
102
무 노력 없이 받기만 하면서 살아왔기 때문에 그렇습니다.
내가 수고해서 번 돈은 함부로 안 쓰지만, 하고 싶은 일
에는 적극적으로 쓰죠. 하지만 부모가 주는 돈은 개념 없이
쓰면서도, 진짜 쓰고 싶은 곳엔 야단맞을까봐 못쓰기도 합
니다. 청소도 세탁도 음식도 내가 직접 하는 것이야말로 학
습이에요. 이런 일들을 지금까지 부모가 대신 해줬는데, 죽
을 때까지 돌봐주지 않는 이상 언젠가는 내가 맞닥뜨려야
합니다. 이 문제를 초등학교 때 해결하는게 나을까요, 서
른 살에 하는게 나을까요?"
청중: "초등학교 때요!"
"그래요. 고착된 습관을 고치려면 힘들어요. 그래도 극복
해야 합니다. 상황을 딛고 나아가려면, 한 발 한 발 내 힘으
로 가야 합니다. 그 누구도 내 삶을 대신해줄 수가 없으니까
요. 실수에 대해 조바심이 생길 때 이렇게 생각해보세요. 농
구 선수가 골대에 공 넣는 연습을 할 때, 공이 들어가도 다
시 던지고, 안 들어가도 다시 던지면서 연습합니다. 이렇게
연습이라는 것은 들어가도 하고 안 들어가도 하는 겁니다.
103
다가 의사가 복직 한번 해 보세요' 하는 의견을 내면, 다시
는 꾸준히 약을 먹고 치료를 받는 거예요. 치료를 꾸준히 하
가장 중요한 것은 의사가 괜찮다는 의견을 제시할 때까지
출근하다가 힘들면 다시 휴가를 내는 한이 있더라도
다녀보는 거예요 요즘 약은 먹고 있지요?"
직장엘
그래요 약을 꾸준히 먹으니까 이렇게 질문도 할 수 있
는 거예요 그렇게 꾸준히 치료를 받는 것이 가장 중요합니
다. 그 다음에 되도록 많이 걷고 잠도 푹 자는 게 좋아요. 잠
을 못 잔다는 것은 신경이 예민하다는 증거예요. 잠을 못자
는 상태가 지속되면 신경안정제를 먹는 것도 좋아요. 조금
먹고 잠을 잘 자는게 좋습니다. 그렇게 운동을 하고 잠을 푹
자야 해요
그리고 되도록 생각을 줄여야 해요. 가만히 있어도 이런
저런 생각이 올라올 텐데, 그럴 때마다 병인 줄 알아야 합니
다. 조금 전 다른 사람과 이야기 나눈 것이 자꾸 생각나면,
그럴 때마다 벌떡 일어나서 밖으로 나가 걷든지 뛰든지, 책
O
ㄷ
로
로
리
싶
ㅍ재하
어
70
을 보든지, TV를 보든지 해서 같은 장면이 머릿속에서 계속
떠오르는 것을 멈추어야 해요. 알아차리는 순간, 화면을 꺼
주어야 합니다.
현재 첫 목표는 회사 다니는 것이 아니라 안 죽는 거예요.
아무리 죽고 싶어도 죽으면 안 되겠지요?"
"잘 모르겠습니다. 죽는 데에도 선택권이 있다고 생각합니
글."
AREAL
"그런데 그런 생각을 자꾸 하면 결국 죽게 돼요. 교통사고
우연히 죽는 건 어쩔 수 없지만, 어떠한 일이 있어도 스스
죽어서는 안 된다는 것을 1차 목표로 해야 해요. 지금 우
나라는 하루에 30명 이상이 자살을 해요. 그 대열에 끼고
들어요? 죽는 것은 선택이라는 생각을 탁 바꾸어야 해요. 현
상태에서는 1차 목표를 죽지 않는 것으로 하세요. 지금
떠한 경우에도, 아무리 죽고 싶어도 스스로 죽는 행위는
지 않겠다고 약속해보세요.
항상 '살아있는 것만 해도 다행이다'라고 생각하세요. 그
71
그러면 돈과 지위를 버리는 게 수행자예요. 그런 욕심을
버리는 게 수행자에요?"
"욕심을 버리는 게 수행자입니다."
"그럼 도를 얻겠다고 했을 때는 이게 수행일까요, 욕심일
까요?"
"욕심이요 그런데 머리로는 알겠는데 막상 수행할 때면 자책
하는 부정적인 마음에서 잘 빠져나오지 못해요."
"그건 질문자 마음에 욕심이 있기 때문이에요. 그 욕심의
대상이 돈이나 지위나 명예에서 도로 바뀌었을 뿐이에요.
돈과는 'ㄴ'자 하나 차이잖아요. 돈을 구하다가 'ㄴ'자를
떼고도를 구하는 것은 같은 말이에요.
예를 들어 선방에서 스님들이 깨달음을 얻겠다고 참선을
하잖아요. 하지만 10년을 했는데도 깨닫지 못했다면 그스
남은 괴로울까요, 안 괴로울까요?"
46
"괴로워요"
"괴롭다고 하면 그는 수행자예요. 돈 대신 도를 구하는 사
람이에요?"
"돈 대신 도를 구하는 사람이요."
"네. 그렇기에 수행자는 도를 구하는 사람이 아니라 괴로
물 일이 없는 사람이에요."
"네, 알겠습니다.”
"화가 나서 괴로운 것도 마찬가집니다. 화를 안 내는 게
수행자가 아니라 화날 때 화가 일어나는 줄 알아차리는 사
락이 수행자예요. 화가 났지만 놓쳐서 화를 냈으면 다음에
안 놓쳐야지 다짐하는 사람, 그럼에도 다시 놓치면 '또 놓
네' 하는 사람이 수행자예요. 그걸 갖고 후회하면서 나는
안 된다'며 지나간 과거를 논한다면 그는 수행자가 아니에
요. 그러니 지금 여기 깨어있어야 합니다.
47
추가 자료
무료 단어암기 프로그램 부로 단어시험지 자
무료 실전문제 10회분 해커스토익 Hackers.c
print(c)
Out
--Tensor - NumPy ---
[[1. 2.]
[3.4.]]
-NumPy - Tensor ---
tensor([[1., 2.],
[3., 4.]])
In
3.2.4 범위를 지정하여 Tensor의 일부에 접근
다양한 방법으로 Tensor의 일부에 범위를 지정하여 접근할 수 있습
▼ 범위를 지정하여 Tensor의 요소에 접근
a-torch. tensor([[1, 2, 3],
[4,5,6]])
print("--- 2개의 인덱스를 지정)
print(a[0, 1])
print("범위를 지정)
print(a[1:2, :2])
print("--- 리스트로 여러 개의 인덱스를 지정 ---")
print(a[:, [0,2]])
print("--- 3보다 큰 요소만을 지정 ---")
print(a[a>3])
66 CHAPTER 3 PyTorch 8 2
습니다.
print("--- 요소의 변경 ---")
a[0,2] = 11
print(a))
print("--- 요소의 일괄 변경 ---")
a[:, 1] = 22
print(a)
print("--- 10보다 큰 요소만 변경 ---")
a[a>10]-33
print(a)
Out
2개의 인덱스를 지정
tensor(2)
범위를 지정
tensor ([[4, 5]])
리스트로 여러 개의 인덱스를 지정-
tensor ([[13],
[4, 6]])
-3보다 큰 요소만을 지정
tensor ([4, 5, 6])
요소의 변경 ---
tensor ([[1, 2, 11],
[4, 5, 6]])
요소의 일괄 변경.
tensor ([[1, 22, 11],
[4, 22, 6]])
- 10보다 큰 요소만 변경
3.2 Tensor 67
tenser 1, 33, 337.
[4, 33, 6]])
In
3.2.5 Tensor
Tensor거리의 연산은 일정한 규칙에 따라 이뤄집니다. 형태가 다른 Ten
끼리라도 조건을 충족하면 연산할 수 있습니다.
▼ Tensor의 연산
벡터
a = torch. tensor([1, 2, 3])
b= torch. tensor([4, 5, 6])
#99
c = torch. tensor([[6, 5, 4],
[3, 2, 1]])
print("-- 벡터와 스칼라의 연산
print(a+3)
print("---벡터끼리의 연산-")
print(a+b)
print("--- 행렬과 스칼라의 연산)
print(c + 2)
print("-- 행렬과 벡터의 연산(브로드캐스트) ---")
print(c + a)
68
CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
T
C
O
print("행렬끼리의 연산---")
print(c+c)
ut
벡터와 스칼라의 연산
tensor ([4, 5, 6])
벡터끼리의 연산-
tensor ([5, 7, 9])
행렬과 스칼라의 연산--
tensor ([[8, 7, 6],
[5, 4, 3]])
행렬과 벡터의 연산(브로드캐스트)
tensor ([[7, 7, 71,
[4, 4, 4]])
행렬끼리의 연산
tensor ([[12, 10, 8],
[6, 4, 2]])
와 a의 합에서는 브로드캐스트가 사용되고 있습니다. 브로드캐스트는 조건을
충족하면 형태가 다른 Tensor끼리도 연산이 가능한 기능인데, 이 경우 C의 각
에 a의 대응하는 요소가 더해집니다.
1.2.6 Tensor 형태 변환하기
Tensor에는 그 형태를 변환하는 함수와 메서드가 몇 가지 있습니다. View()
메서드를 사용하면 Tensor 형태를 자유롭게 변경할 수 있습니다.
7view() 메서드로 Tensor 형태 변환하기
n
a = torch. tensor ([0, 1, 2, 3, 4, 5, 6, 7]) #1차원 Tensor
3.2 Tensor
69
