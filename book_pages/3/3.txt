in
14. 33. 677)
3.25 Tensor 2
Tensor끼리의 연산은 일정한 규칙에 따라 이뤄집니다. 형태가 다른 Tensor
머리라도 조건을 충족하면 연산할 수 있습니다.
Tensor S
a-torch. tensor ([1, 2, 3])
b-torch. tensor ([4, 5, 6])
c- torch. tensor([[6, 5, 4],
[3, 2, 1]])
print("벡터와 스칼라의 연산-")
print(a+3)
print("---벡터끼리의 연산---")
print(a + b)
print("--- 행렬과 스칼라의 연산--")
print(c+2)
print("-- 행렬과 벡터의 연산(브로드캐스트) ---")
print(c+a)
68 CHAPTER 3 PyTorch
print("끼리의 연산)
print(c+c)
Out
--벡터와 스칼라의 연산
tensor([4, 5, 6])
--벡터끼리의 연산
tensor([5, 7,91)
행렬과 스칼라의 연산-
tensor ([[8, 7, 6),
[5, 4, 3]])
--행렬과 벡터의 연산(브로드캐스트) ---
tensor([[7, 7, 7],
[4, 4, 4]])
---행렬끼리의 인산--
tensor([[12, 10, B],
[6, 4, 2]])
C와 그의 합에서는 브로드캐스트가 사용되고 있습니다. 브로드캐스트는 조건을
충족하면 형태가 다른 Tensor끼리도 연산이 가능한 기능인데, 이 경우 C의 각
행에 a의 대응하는 요소가 더해집니다.
3.2.6 Tensor 형태 변환하기
Tensor에는 그 형태를 변환하는 함수와 메서드가 몇 가지 있습니다. View()
메서드를 사용하면 Tensor 형태를 자유롭게 변경할 수 있습니다.
▼view() 메서드로 Tensor 형태 변환하기
In
a = torch.tensor ([0, 1, 2, 3, 4, 5, 6, 7]) 1차원 Tensor
32 Tensor
69
Bovie(2, 4) 의원
In
Out
tensor([[0, 1, 2, 3],
[4, 5, 6, 7]])
여러 인수 중 하나를 1로 하면 그 차원의 요소수는 자동으로 계산됩니다.
다음 예에서는 인수에 2와 4를 지정해야 하는 곳을 2와 -1을 지정하고 있습니다.
view) 메서드의 인수 중 1개월 -1로 한다
c= torch.tensor ([e, 1, 2, 3, 4, 5, 6, 7]) 1차원 Tensor
d=c.view(2-1)
print(d)
(2, 4)의 2차원 Tensor로 변환
Out
tensor ([[e, 1, 2, 3],
[4,5,6,7]])
또한, 인수를 1로만 하면 Tensor는 자원으로 변환됩니다.
▼view)메서드의 인수를-1 로만 한다
In
e- torch. tensor ([[[0, 1],
[2, 3]],
[[4,5],
[6,7]]])
3차원 Tensor
f=c.view(-1) 1차원 Tensor로 변환
print(f)
70 CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
OUT
tensor ([e, 1, 2, 3, 4, 5, 6, 7])
또한, squeeze() 메서드를 사용하면 요소 수가 1인 차원이 삭제됩니다.
In
squeeze) 메서드로 요소수가 1인 차원을 삭제하기
print("--- 요소 수가 1인 차원이 포함되는 4차원 Tensor
g- torch.arange(0, B).view(1, 2, 1, 4)
print(g)
print("요소수가 1인 차원을 삭제
h-g.squeeze()
print(h)
Out
・요소 수가 1인 차원이 포함되는 4차원 Tensor.
tensor ([[[[0, 1, 2, 3]],
[[4,5,6,7]]]]
--- 요소 수가 1인 차원을 삭제--
tensor ([[0, 1, 2, 3],
[4, 5, 6, 7]])
반대로 unsqueeze() 메서드를 사용하면 요소 수가 1인 차원을 추가할 수 있
습니다.
▼unsqueeze() 메서드로 요소 수가 1인 차원을 추가한다
In
print("--- 2차원 Tensor)
i torch.arange(0, 8).view(2, -1)
3.2 Tensor 71
72
Out
print(i)
print요소수가 1인 차원을 가장 안쪽 (2)에 추가 ----
J1umsqueeze(2)
print(3)
-2차원 Tensor ---
tensor([[0, 1, 2, 3]
[4, 5, 6, 7]])
요소수가 1인 차원을 가장 안쪽 (2)에 추가 ---
tensor([[[0].
[1].
[2],
[3]],
[[4],
[5],
[6],
[7]]])
3.2.7 다양한 통계값 계산
평균값, 합계값, 최댓값, 최솟값 등 Tensor의 다양한 통계값을 계산하는 함수
와 메서드가 있습니다. Tensor로부터 Python 통상의 값을 구하려면 item()
메서드를 사용합니다.
CHAPTER 3 PyTorch로 구현하는 간단한 심층학습
In
Temsor의 다양한 계간을 계산하기
a torch. tensor ([[1, 2, 3],
[4, 5, 6.11)
print("평균값을 구하는 함수
m = torch.mean(a)
print(m.item()) #i
print("--평균값을 구하는 메서드
m-a.rean()
print(.item())
print("--- 앨범 평균값)
print(a.mean(e))
print("합계값
print(torch.sun(a).item())
print("최댓값--")
print(torch.max(a).item())
print("최솟값---")
print(torch.min(a).item())
Out
3.5
평균값을 구하는 함수.
-평균값을 구하는 메서드.
3.5
32 Tensor 73
